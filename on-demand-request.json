{"source":"// This example shows how to calculate a continuously compounding interested rate.\n// This calculation would require significant on-chain gas, but is easy for a decentralized oracle network.\n\n// Arguments can be provided when a request is initated on-chain and used in the request source code as shown below\nconst principalAmount = parseInt(args[4]);\nconst APYTimes100 = parseInt(args[5]);\nconst APYAsDecimalPercentage = (APYTimes100 / 100) / 100;\n\nconst timeInYears = (1/12); // represents 1 month\nconst eulersNumber = 2.7183;\n\n// Continuouly-compounding interest formula: A = Pe^(rt)\nconst totalAmountAfterInterest = principalAmount * eulersNumber ** (APYAsDecimalPercentage * timeInYears);\n\n// The source code MUST return a Buffer or the request will return an error message\n// Use one of the following functions to convert to a Buffer representing the response bytes that are returned to the client smart contract:\n// - OCR2DR.encodeUint256\n// - OCR2DR.encodeInt256\n// - OCR2DR.encodeString\n// Or return a custom Buffer for a custom byte encoding\nreturn OCR2DR.encodeUint256(Math.round(totalAmountAfterInterest));","secrets":"0x11eb318cc80c29b142eb63dd033b5b3c02a7930f79a158eded3edfffc49ec31c7c17bef78c019d259a60d43b1955c2d1494e99ced10e55c206565f3c4627f9924b87e89006b8140378c649e54f4cb3d4476d36aabc5fe4e8788a8036ac6d398f21711cfef352d914bd7727ab8ecbcb598e0f46fe2aa74cdd74f20804113c622b8bc0d197a33729965b9b0e1871aaf4ac58e36c22d61bc24788e139bcb5e905bd0140bf0746d7863f804d9c5317f60c0009c4a5f0c6c7e6a10a3c25350f3cda1c7b0c817a2743fa0be18aae36d6fbb11b9f3cbc172693024130c361f58b56e3992d20e6eea9aab4e6831494399f99a80e01e4203de5c323488793a235754d735c35","args":["1","bitcoin","btc-bitcoin","btc","1000000","450"]}